{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "38a683d4-f0fa-435c-bd24-1ef62feb33f1",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "In this notebook, we aim to predict stroke using Random Forest Classifier. The data includes information about patients' demographics, medical history, and lifestyle. The data includes 12 attributes such as `gender`, `age`, `hypertension`, `heart_disease`, `ever_married`, `work_type`, `Residence_type`, `avg_glucose_level`, `bmi`, `smoking_status` and `stroke`. Our goal is to use the information provided by these attributes to predict whether a patient is likely to have a stroke or not."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40e8108a-fc0b-4213-9b39-eaaea45bc8fd",
   "metadata": {},
   "source": [
    "## Data Description\n",
    "The data contains information about 43400 patients. The following are the attributes of the data:"
   ]
  },
  {
   "cell_type": "raw",
   "id": "bdfd58bf-108a-4d4f-857c-fa1b7a9b2489",
   "metadata": {},
   "source": [
    "gender: \"Male\", \"Female\" or \"Other\"\n",
    "age: age of the patient\n",
    "hypertension: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension\n",
    "heart_disease: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease\n",
    "ever_married: \"No\" or \"Yes\"\n",
    "work_type: \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"\n",
    "Residence_type: \"Rural\" or \"Urban\"\n",
    "avg_glucose_level: average glucose level in blood\n",
    "bmi: body mass index\n",
    "smoking_status: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"\n",
    "stroke: 1 if the patient had a stroke or 0 if not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "b0795fdc-04c6-4397-9f23-1bffdc0e272d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "90a6e50e-1d78-4b4c-bda8-79dbb51056dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reading the dataset and storing it in variable 'stroke'\n",
    "stroke=pd.read_csv('stroke.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "b1cab3cc-1451-4383-9d5d-869c18f62db5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                     0\n",
       "gender                 0\n",
       "age                    0\n",
       "hypertension           0\n",
       "heart_disease          0\n",
       "ever_married           0\n",
       "work_type              0\n",
       "Residence_type         0\n",
       "avg_glucose_level      0\n",
       "bmi                  201\n",
       "smoking_status         0\n",
       "stroke                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Counting the missing values in each column\n",
    "stroke.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "56bf8779-d628-46fb-a9ad-d5e8efb40447",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Removing the column 'bmi' from the dataset\n",
    "stroke. drop('bmi', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "4b947cff-9be1-4c71-ba6e-287e82b043ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                   0\n",
       "gender               0\n",
       "age                  0\n",
       "hypertension         0\n",
       "heart_disease        0\n",
       "ever_married         0\n",
       "work_type            0\n",
       "Residence_type       0\n",
       "avg_glucose_level    0\n",
       "smoking_status       0\n",
       "stroke               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Recounting the missing values in each column\n",
    "stroke.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "5690a51a-ff00-432a-bea1-881ea4439d4f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>smoking_status</th>\n",
       "      <th>stroke</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9046</td>\n",
       "      <td>Male</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>228.69</td>\n",
       "      <td>formerly smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>51676</td>\n",
       "      <td>Female</td>\n",
       "      <td>61.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>202.21</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>31112</td>\n",
       "      <td>Male</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>105.92</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60182</td>\n",
       "      <td>Female</td>\n",
       "      <td>49.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>171.23</td>\n",
       "      <td>smokes</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1665</td>\n",
       "      <td>Female</td>\n",
       "      <td>79.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>174.12</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id  gender   age  hypertension  heart_disease ever_married  \\\n",
       "0   9046    Male  67.0             0              1          Yes   \n",
       "1  51676  Female  61.0             0              0          Yes   \n",
       "2  31112    Male  80.0             0              1          Yes   \n",
       "3  60182  Female  49.0             0              0          Yes   \n",
       "4   1665  Female  79.0             1              0          Yes   \n",
       "\n",
       "       work_type Residence_type  avg_glucose_level   smoking_status  stroke  \n",
       "0        Private          Urban             228.69  formerly smoked       1  \n",
       "1  Self-employed          Rural             202.21     never smoked       1  \n",
       "2        Private          Rural             105.92     never smoked       1  \n",
       "3        Private          Urban             171.23           smokes       1  \n",
       "4  Self-employed          Rural             174.12     never smoked       1  "
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Displaying the first 5 rows of the dataset\n",
    "stroke.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "9d4a590b-65de-44ce-b1ed-9edac5b9ac1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5110, 11)"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting the shape of the dataset\n",
    "stroke.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cb26816-28eb-4508-9c4f-5267f5434bfa",
   "metadata": {},
   "source": [
    "# Data Cleaning\n",
    "In this section we will be cleaning the data by removing null values, encoding categorical variables and scaling independent variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "d520cb22-645a-44e3-b440-e679f132224f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "453bce89-8462-4bcc-8805-e64e0a41163a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 'Female', 1: 'Male', 2: 'Other'}"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "encoder = LabelEncoder()\n",
    "# Encoding the 'gender' column of the dataset\n",
    "stroke['gender'] = encoder.fit_transform(stroke['gender'])\n",
    "# Creating a dictionary to store the encoded values and their corresponding original values\n",
    "gender = {index : label for index, label in enumerate(encoder.classes_)}\n",
    "# Displaying the dictionary\n",
    "gender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "bd39e5ca-33fd-46fa-a224-2cc6e80087d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 'No', 1: 'Yes'}"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stroke['ever_married'] = encoder.fit_transform(stroke['ever_married'])\n",
    "ever_married = {index : label for index, label in enumerate(encoder.classes_)}\n",
    "ever_married"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "6c46cf5a-8559-4ebf-8c18-f73edf2dc4dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 'Govt_job',\n",
       " 1: 'Never_worked',\n",
       " 2: 'Private',\n",
       " 3: 'Self-employed',\n",
       " 4: 'children'}"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stroke['work_type'] = encoder.fit_transform(stroke['work_type'])\n",
    "work_type = {index : label for index, label in enumerate(encoder.classes_)}\n",
    "work_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "d83eb705-015c-40bb-912e-055c96c86971",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 'Rural', 1: 'Urban'}"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stroke['Residence_type'] = encoder.fit_transform(stroke['Residence_type'])\n",
    "Residence_type = {index : label for index, label in enumerate(encoder.classes_)}\n",
    "Residence_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "7feb33df-9e58-4128-84de-471af6ee5b1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 'Unknown', 1: 'formerly smoked', 2: 'never smoked', 3: 'smokes'}"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stroke['smoking_status'] = encoder.fit_transform(stroke['smoking_status'])\n",
    "smoking_status = {index : label for index, label in enumerate(encoder.classes_)}\n",
    "smoking_status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "860c2037-9286-4eca-b8b2-0d0ea2bb686a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Storing the independent variables in 'x'\n",
    "x = stroke.drop('stroke', axis=1)\n",
    "# Storing the dependent variable in 'y'\n",
    "y = stroke['stroke']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "de5ba136-3cde-4b81-bd09-551f484530bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "3b08cf4c-0bdb-409b-81fe-08d49b844d3f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X Data is \n",
      " [[9.0460e+03 1.0000e+00 6.7000e+01 0.0000e+00 1.0000e+00 1.0000e+00\n",
      "  2.0000e+00 1.0000e+00 2.2869e+02 1.0000e+00]\n",
      " [5.1676e+04 0.0000e+00 6.1000e+01 0.0000e+00 0.0000e+00 1.0000e+00\n",
      "  3.0000e+00 0.0000e+00 2.0221e+02 2.0000e+00]\n",
      " [3.1112e+04 1.0000e+00 8.0000e+01 0.0000e+00 1.0000e+00 1.0000e+00\n",
      "  2.0000e+00 0.0000e+00 1.0592e+02 2.0000e+00]\n",
      " [6.0182e+04 0.0000e+00 4.9000e+01 0.0000e+00 0.0000e+00 1.0000e+00\n",
      "  2.0000e+00 1.0000e+00 1.7123e+02 3.0000e+00]\n",
      " [1.6650e+03 0.0000e+00 7.9000e+01 1.0000e+00 0.0000e+00 1.0000e+00\n",
      "  3.0000e+00 0.0000e+00 1.7412e+02 2.0000e+00]\n",
      " [5.6669e+04 1.0000e+00 8.1000e+01 0.0000e+00 0.0000e+00 1.0000e+00\n",
      "  2.0000e+00 1.0000e+00 1.8621e+02 1.0000e+00]\n",
      " [5.3882e+04 1.0000e+00 7.4000e+01 1.0000e+00 1.0000e+00 1.0000e+00\n",
      "  2.0000e+00 0.0000e+00 7.0090e+01 2.0000e+00]\n",
      " [1.0434e+04 0.0000e+00 6.9000e+01 0.0000e+00 0.0000e+00 0.0000e+00\n",
      "  2.0000e+00 1.0000e+00 9.4390e+01 2.0000e+00]\n",
      " [2.7419e+04 0.0000e+00 5.9000e+01 0.0000e+00 0.0000e+00 1.0000e+00\n",
      "  2.0000e+00 0.0000e+00 7.6150e+01 0.0000e+00]\n",
      " [6.0491e+04 0.0000e+00 7.8000e+01 0.0000e+00 0.0000e+00 1.0000e+00\n",
      "  2.0000e+00 1.0000e+00 5.8570e+01 0.0000e+00]]\n",
      "y Data is \n",
      " 0    1\n",
      "1    1\n",
      "2    1\n",
      "3    1\n",
      "4    1\n",
      "5    1\n",
      "6    1\n",
      "7    1\n",
      "8    1\n",
      "9    1\n",
      "Name: stroke, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Creating an object of SimpleImputer\n",
    "ImputedModule = SimpleImputer(missing_values = np.nan, strategy ='mean')\n",
    "# Fitting the imputer on 'x'\n",
    "ImputedX = ImputedModule.fit(x)\n",
    "# Imputing the missing values in 'x'\n",
    "X = ImputedX.transform(x)\n",
    "\n",
    "#X Data\n",
    "print('X Data is \\n' , X[:10])\n",
    "\n",
    "#y Data\n",
    "print('y Data is \\n' , y[:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "f76326a6-d6bb-42c3-8644-9731d2379dbd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x \n",
      " [[0.12321436 0.5        0.81689453 0.         1.         1.\n",
      "  0.5        1.         0.80126489 0.33333333]\n",
      " [0.70820468 0.         0.74365234 0.         0.         1.\n",
      "  0.75       0.         0.67902317 0.66666667]\n",
      " [0.42601512 0.5        0.97558594 0.         1.         1.\n",
      "  0.5        0.         0.23451205 0.66666667]\n",
      " [0.8249283  0.         0.59716797 0.         0.         1.\n",
      "  0.5        1.         0.53600776 1.        ]\n",
      " [0.02192856 0.         0.96337891 1.         0.         1.\n",
      "  0.75       0.         0.54934909 0.66666667]\n",
      " [0.77672115 0.5        0.98779297 0.         0.         1.\n",
      "  0.5        1.         0.60516111 0.33333333]\n",
      " [0.73847653 0.5        0.90234375 1.         1.         1.\n",
      "  0.5        0.         0.06910719 0.66666667]\n",
      " [0.14226119 0.         0.84130859 0.         0.         0.\n",
      "  0.5        1.         0.1812852  0.66666667]\n",
      " [0.37533792 0.         0.71923828 0.         0.         1.\n",
      "  0.5        0.         0.09708245 0.        ]\n",
      " [0.82916855 0.         0.95117188 0.         0.         1.\n",
      "  0.5        1.         0.01592651 0.        ]]\n",
      "y \n",
      " 0    1\n",
      "1    1\n",
      "2    1\n",
      "3    1\n",
      "4    1\n",
      "5    1\n",
      "6    1\n",
      "7    1\n",
      "8    1\n",
      "9    1\n",
      "Name: stroke, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "scaler = MinMaxScaler(copy=True, feature_range=(0, 1))\n",
    "# Scaling the independent variables\n",
    "X = scaler.fit_transform(x)\n",
    "\n",
    "# Displaying the first 10 rows of the scaled independent variables\n",
    "print('x \\n' , X[:10])\n",
    "# Displaying the first 10 rows of the dependent variable\n",
    "print('y \\n' , y[:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "6f941a99-05b3-44d5-bfa4-bb1e37d0efc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "b797bcec-b47a-4d31-b1c3-daf88018c4c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_train shape is: (5080, 10)\n",
      "x_test shape is: (30, 10)\n",
      "y_train shape is: (5080,)\n",
      "y_test shape is: (30,)\n"
     ]
    }
   ],
   "source": [
    "# Splitting the data into training and testing sets\n",
    "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=30,random_state=0)\n",
    "# Printing the shapes of the training and testing sets\n",
    "print(\"x_train shape is:\",x_train.shape)\n",
    "print(\"x_test shape is:\",x_test.shape)\n",
    "print(\"y_train shape is:\",y_train.shape)\n",
    "print(\"y_test shape is:\",y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "0bb7b031-b2b9-4339-a04c-b6b0818537fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "e84dd99b-83fe-448f-b3b8-728fef42e7fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RandomForestClassifierModel Train Score is :  0.9515748031496063\n",
      "RandomForestClassifierModel Test Score is :  0.9333333333333333\n",
      "RandomForestClassifierModel features importances are :  [0.13600479 0.01210638 0.40137104 0.05392601 0.05996889 0.0352886\n",
      " 0.03487013 0.01467571 0.22250358 0.02928487]\n",
      "Predicted Value for RandomForestClassifierModel is :  [0 0 0 0 0 0 0 0 0 0]\n",
      "Prediction Probabilities Value for RandomForestClassifierModel is :  [[0.80039313 0.19960687]\n",
      " [0.99633742 0.00366258]\n",
      " [0.95812789 0.04187211]\n",
      " [0.99262461 0.00737539]\n",
      " [0.99606523 0.00393477]\n",
      " [0.97818964 0.02181036]\n",
      " [0.93457429 0.06542571]\n",
      " [0.92226415 0.07773585]\n",
      " [0.96073339 0.03926661]\n",
      " [0.63868093 0.36131907]]\n"
     ]
    }
   ],
   "source": [
    "RandomForestClassifierModel = RandomForestClassifier(criterion = 'gini',n_estimators=100,max_depth=5,random_state=33)\n",
    "# Fitting the model on the training data\n",
    "RandomForestClassifierModel.fit(x_train, y_train)\n",
    "\n",
    "#Calculating Details\n",
    "print('RandomForestClassifierModel Train Score is : ' , RandomForestClassifierModel.score(x_train, y_train))\n",
    "print('RandomForestClassifierModel Test Score is : ' , RandomForestClassifierModel.score(x_test, y_test))\n",
    "print('RandomForestClassifierModel features importances are : ' , RandomForestClassifierModel.feature_importances_)\n",
    "\n",
    "#Calculating Prediction\n",
    "y_pred = RandomForestClassifierModel.predict(x_test)\n",
    "y_pred_prob = RandomForestClassifierModel.predict_proba(x_test)\n",
    "print('Predicted Value for RandomForestClassifierModel is : ' , y_pred[:10])\n",
    "print('Prediction Probabilities Value for RandomForestClassifierModel is : ' , y_pred_prob[:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "ce1e572a-d98f-4472-8ee3-18ad223324ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "68b63f7e-72c7-4d1c-ad6c-e141a7e93554",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Score:  28\n"
     ]
    }
   ],
   "source": [
    "AccScore = accuracy_score(y_test, y_pred, normalize=False)\n",
    "print('Accuracy Score: ', AccScore)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "e406c30b-2599-4822-9925-34abe6154397",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import f1_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "f52e4b6a-230c-439b-a568-3a1879482280",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1 Score:  0.9333333333333333\n"
     ]
    }
   ],
   "source": [
    "F1Score = f1_score(y_test, y_pred, average='micro') #it can be : binary,macro,weighted,samples\n",
    "print('F1 Score: ', F1Score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "a64fa776-df9e-4ded-a6d4-934cf7efdaf0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1534192b-97f6-4e7d-9a24-47299beace3c",
   "metadata": {},
   "source": [
    "# Confusion Matrix\n",
    "A confusion matrix is a table that is used to define the performance of a classification algorithm. It is used to evaluate the accuracy of a classification algorithm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "564dcbc6-774c-4fb6-bdfb-540129198afa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix: \n",
      " [[28  0]\n",
      " [ 2  0]]\n"
     ]
    }
   ],
   "source": [
    "confusionMatrix = confusion_matrix(y_test, y_pred)\n",
    "print('Confusion Matrix: \\n', confusionMatrix)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75ca6913-9115-447e-8917-e01c5c7df595",
   "metadata": {},
   "source": [
    "# Heatmap\n",
    "This heatmap visualization is useful for understanding the performance of the classification model, as it provides a clear visual representation of the number of correct and incorrect predictions made by the model. The heatmap will be used to show the true positive, true negative, false positive, and false negative values and the accuracy of the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "7d10da55-ba43-4716-9d9d-bb8191edc6c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(confusionMatrix, center = True,annot=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f45c0ac2-8fcd-4d6b-9b04-88f931c8af4c",
   "metadata": {},
   "source": [
    "# Conclusion\n",
    "In this section, we will summarize the results of our analysis and provide some insights about what we learned from the data. We will also provide some suggestions for further research or improvements to the model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1196dcb2-8ae0-4554-a803-a6580ce35623",
   "metadata": {},
   "source": [
    "The confusion matrix has the following structure:"
   ]
  },
  {
   "cell_type": "raw",
   "id": "1d42b509-5a18-484b-9969-29a54e758886",
   "metadata": {},
   "source": [
    "                | Predicted Positive| Predicted Negative |\n",
    "Actual Positive | 28                | 2                  |\n",
    "Actual Negative | 0                 | 0                  |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5743487-f6a8-48ea-a3dd-2b82a24c56df",
   "metadata": {},
   "source": [
    "This tells us that:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "414db717-c6e1-4f0e-a379-675b08e223d5",
   "metadata": {},
   "source": [
    "True Positive (TP) = 28, The number of times the model correctly predicted the positive class (i.e, patients who had a stroke)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c670074-1e6f-4e8e-a0bb-84889cf3941a",
   "metadata": {},
   "source": [
    "False Negative (FN) = 2, The number of times the model incorrectly predicted the negative class (i.e, patients who did not have a stroke)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0a90ff2-6cef-49b7-8ba6-a89ebc488143",
   "metadata": {},
   "source": [
    "True Negative (TN) = 0, The number of times the model correctly predicted the negative class (i.e, patients who did not have a stroke)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4979b053-f161-4f7c-99dd-d1421dd8184b",
   "metadata": {},
   "source": [
    "False Positive (FP) = 0, The number of times the model incorrectly predicted the positive class (i.e, patients who had a stroke)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65b5d7c1-5d9e-46b0-8cae-551e4922dd42",
   "metadata": {},
   "source": [
    "#### This confusion matrix is indicating that the model is classifying all of the instances in the test set as positive. This due to the fact that the data is imbalanced, meaning that the number of positive instances (i.e. patients who had a stroke) is much smaller than the number of negative instances (i.e. patients who did not have a stroke)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
